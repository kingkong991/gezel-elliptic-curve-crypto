#ifndef WRAPPER_GF2M_FDL
#define WRAPPER_GF2M_FDL

#include "constants.inc"

#include "malu.fdl"

// Mode:	0 = addition
//			1 = multiplication

dp malu2: malu
dp malu3: malu
dp malu4: malu

dp wrapper_gf2m (in A: ns(const_m);
	in B: ns(const_m);
	in start: ns(1);
	in mode: ns(1);
	in plus_one: ns(1);
	out T: ns(const_m);
	out ready: ns(1)) {

	reg reg_start: ns(1);
	reg reg_mode: ns(1);
	reg reg_plus_one: ns(1);

	reg reg_T: ns(const_m);
	reg reg_m: ns(1);

	reg reg_cycle: ns(const_m_log);
	
	reg reg_prev_ready:	ns(1);

	sig B1_in: ns(const_m);
	sig B1_mux: ns(1);
	sig T1_in: ns(const_m);
	sig T1_out: ns(const_m);
	sig m1_in: ns(1);
	sig m1_out: ns(1);

	sig B2_in: ns(const_m);
	sig B2_mux: ns(1);
	sig T2_in: ns(const_m);
	sig T2_out: ns(const_m);
	sig m2_in: ns(1);
	sig m2_out: ns(1);

	sig B3_in: ns(const_m);
	sig B3_mux: ns(1);
	sig T3_in: ns(const_m);
	sig T3_out: ns(const_m);
	sig m3_in: ns(1);
	sig m3_out: ns(1);

	sig B4_in: ns(const_m);
	sig B4_mux: ns(1);
	sig T4_in: ns(const_m);
	sig T4_out: ns(const_m);
	sig m4_in: ns(1);
	sig m4_out: ns(1);

	sig T_mux: ns(const_m);
	sig m_mux: ns(1);
	
	sig sig_T_last: ns(1);

	// Signal for clock gating reg_T
	sig sig_en_T: ns(1);
	
	// Signal for final result (addition: from MALU 1, mult: from MALU 3)
	sig sig_final_T: ns(const_m);

	sig sig_ready: ns(1);

	use malu(T1_in, B1_in, m1_in, T1_out, m1_out);
	use malu2(T2_in, B2_in, m2_in, T2_out, m2_out);
	use malu3(T3_in, B3_in, m3_in, T3_out, m3_out);
	use malu4(T4_in, B4_in, m4_in, T4_out, m4_out);

	sfg do_always {
		reg_start = start;

		// Update settings regs as long as start is high
		reg_mode = start == 1 ? mode : reg_mode;
		reg_plus_one = start == 1 ? plus_one : reg_plus_one;
		
		// When start is low, increase cycle counter, otherwise reset
		reg_cycle = start == 1 ? 0 : (sig_ready == 1 ? reg_cycle : reg_cycle + 1);

		// Store data in reg_T:
		// When start is high, either set reg_T to 0 (multiplication) or A (addition)
		// Otherwise set reg_T to MALU_output or MALU_output shifted 1 to the left (so the result stays the same)
		sig_final_T = reg_mode == 0 | reg_prev_ready == 1 ? m1_out # m2_out # m3_out # T3_out[(const_m - 1):3] : m3_out # T3_out[(const_m - 1):1];
		T_mux = start == 1 ? (mode == 0 ? A : 0) : (sig_ready == 1 ? sig_final_T : T4_out);

		// As long as final result isn't stored in reg_T or if start is high, enable updating of it's value
		sig_en_T = start == 1 | reg_prev_ready == 0 ? 1 : 0;

		reg_T = sig_en_T == 1 ? T_mux : reg_T;

		T1_in = reg_T;
		T2_in = T1_out;
		T3_in = T2_out;
		T4_in = T3_out;
		
		// Set output to input of reg_T
		sig_T_last = T_mux[0] ^ reg_plus_one;
		T = T_mux[(const_m - 1):1] # sig_T_last;
		
		// Set B input of mux
		// If ready: AND 0, else if addition and 1 cycle after starting: AND 1, else if multiplication: AND last A bit 		
		B1_mux = ~reg_prev_ready & (~reg_mode | A[const_m - 1]);
		B1_in = B & (B1_mux == 1 ? ((ns(const_m)) all_ones) : 0);
		
		B2_mux = reg_mode & (~reg_prev_ready & A[const_m - 2]);
		B2_in = B & (B2_mux == 1 ? ((ns(const_m)) all_ones) : 0);

		B3_mux = reg_mode & (~reg_prev_ready & A[const_m - 3]);
		B3_in = B & (B3_mux == 1 ? ((ns(const_m)) all_ones) : 0);

		B4_mux = A[const_m - 4];
		B4_in = B & (B4_mux == 1 ? ((ns(const_m)) all_ones) : 0);
		
		// Set reg_m
		// If start or sig_ready or reg_ready is high, set m to 0, otherwise set to output from MALU
		m1_in = reg_m;
		m2_in = reg_mode & ~reg_prev_ready & m1_out;
		m3_in	= reg_mode & ~reg_prev_ready & m2_out;
		m4_in = m3_out;
		
		m_mux = ~(sig_ready | start) & m4_out;
		reg_m = m_mux;

		// Set ready register and output:
		// If start = 1 then ready = 0. Else, if doing addition, set ready to 1; when doing multiplication, set to zero as long as reg_cycle <= const_m - 2.
		sig_ready = start == 1 ? 0 : (reg_mode == 0 ? 1 : (reg_cycle <= (const_m_malu - 2) ? 0 : 1));
		ready = sig_ready;
		//ready = reg_prev_ready;
		reg_prev_ready = sig_ready;
		
		//$display("[Wrapper] B_in = ", $dec, B_in, " - T_in = ", T_in, " - m_in = ", m_in, " - T_out = ", T_out, " - sig_ready = ", sig_ready, " - reg_T = ", reg_T, " - T_mux = ", T_mux, " - B_mux = ", B_mux, " - start = ", start);
		//$display("[Wrapper] Cycle: ", $cycle, " - T_in: ", T1_in, " - T: ", T, " - B1m: ", B1_mux, " - B2m: ", B2_mux, " - B3m: ", B3_mux, " - ready:", ready);
	}
} hardwired fsm_wrapper_gf2m (wrapper_gf2m) { do_always; }

#endif /* WRAPPER_GF2M_FDL */

