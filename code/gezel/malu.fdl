#ifndef MALU_FDL
#define MALU_FDL

#include "constants.inc"

dp malu (in T: ns(const_m);
	in B: ns(const_m);
	in m_in: ns(1);
	out T_n: ns(const_m);
	out m_n: ns(1)) {

	sig sum: ns(const_m);
	sig result: ns(const_m);

	sfg run {
		sum = T ^ B;
		result = XOR_P(sum, m_in);
		//result = ((ns(155)) sum[8:162]) # ((ns(1)) sum[7] ^ m_in) # ((ns(1)) sum[6] ^ m_in) # ((ns(2)) sum[4:5]) # ((ns(1)) sum[3] ^ m_in) # ((ns(2)) sum[1:2]) # ((ns(1)) sum[0] ^ m_in);

		T_n = result[0:(const_m - 2)]  # ((ns(1)) 0b0);
		m_n = result[const_m - 1];

		//$display("[MALU] Sum = ", $dec, sum, " = ", $bin, sum," - Result = ", $dec, result, " = ", $bin, result, " - sum[0] = ", sum[0] ^ m_in);
	}
} hardwired h_malu (malu) { run; }

#endif /* MALU_FDL */
