#include "constants.inc"

#include "wrapper_pairing.fdl"

/*
 * Some random test points:
 *
 * P:
 *		0x18239FA96047C449DBF0D78A2A596E5A7D67D209F
 *		0x421655A1B0BA910F5A1AB8E0C46C3B45F9EE48FC2
 *
 * Q:
 *		0x18B05983CBE4AD54B2EA7597DD441ABD8CFD5B3D3
 *		0x3D6CB2B7F2C7CDE41B82A65E92D105C2269D1CC75
 */

dp testbench {
	reg reg_in: ns(const_m);
	sig sig_in: ns(const_m);

	sig sig_out: ns(const_m);

	sig start: ns(1);
	sig next: ns(1);

	sig ready: ns(1);

	reg reg_ready: ns(1);
	
	use wrapper_pairing(sig_in, start, next, sig_out, ready);

	sfg init1 {
		start = 1;
		next = 0;

		reg_in = 0x18239FA96047C449DBF0D78A2A596E5A7D67D209F;
	}

	sfg init2 {
		start = 0;
		next = 1;

		reg_in = 0x421655A1B0BA910F5A1AB8E0C46C3B45F9EE48FC2;
	}

	sfg init3 {
		start = 0;
		next = 1;

		reg_in = 0x18B05983CBE4AD54B2EA7597DD441ABD8CFD5B3D3;
	}

	sfg init4 {
		start = 0;
		next = 1;

		reg_in = 0x3D6CB2B7F2C7CDE41B82A65E92D105C2269D1CC75;
	}

	sfg do_always {
		sig_in = reg_in;

		reg_ready = start == 1 ? 0 : ready;
	}

	sfg idle_sigs {
		start = 0;
		next = 0;
	}

	sfg print {
		$display("[Cycle ", $cycle, "] - out: ", $hex, sig_out, " ");
	}

	sfg raise_next {
		start = 0;
		next = 1;
	}

	sfg end {
		$finish;
	}
}

fsm fsm_testbench (testbench) {
	initial init;
	state start, init2, init3, init4;
	state wait, idle;
	state output1, output2, output3, output4, output5, output6, output7, output8;

	@init	(do_always, idle_sigs) -> start;

	@start	(do_always, init1) -> init2;
	@init2	(do_always, init2) -> init3;
	@init3	(do_always, init3) -> init4;
	@init4	(do_always, init4) -> wait;

	@wait	if (reg_ready == 0) then (do_always, idle_sigs) -> wait;
			else (do_always, idle_sigs, print) -> output1;

	@output1	(do_always, raise_next) -> output2;
	@output2 (do_always, idle_sigs, print) -> output3;

	@output3	(do_always, raise_next) -> output4;
	@output4 (do_always, idle_sigs, print) -> output5;

	@output5	(do_always, raise_next) -> output6;
	@output6 (do_always, idle_sigs, print) -> output7;

	@output7	(do_always, raise_next) -> output8;
	@output8 (do_always, idle_sigs, print) -> idle;

	@idle (end, do_always, idle_sigs) -> idle;
}

system S {
	testbench;
}

