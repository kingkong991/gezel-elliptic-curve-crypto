#include "constants.inc"

#include "wrapper_gf2m.fdl"

//$option "vcd"

dp testbench {
	reg reg_A: ns(const_m);
	reg reg_B: ns(const_m);

	sig A: ns(const_m);
	sig B: ns(const_m);

	sig T: ns(const_m);

	sig start: ns(1);
	sig mode: ns(1);

	sig plus_one: ns(1);

	sig ready: ns(1);

	reg reg_cycle: ns(const_m_log);
	reg reg_ready: ns(1);
	
	reg reg_T: ns(const_m);

	//$trace(A, "gf2m-A.txt");
	//$trace(B, "gf2m-B.txt");
	//$trace(T, "gf2m-T.txt");

	use wrapper_gf2m(A, B, start, mode, plus_one, T, ready);

	sfg init {
		reg_cycle = 0;

		//reg_A = 0x18239FA96047C449DBF0D78A2A596E5A7D67D209F;
		//reg_B = 0x421655A1B0BA910F5A1AB8E0C46C3B45F9EE48FC2;
		reg_A = 0x2ade1d7a4dbacde234f2a2672638e5dd699180dfe;
		reg_B = 0x318a4c6e93e748f6c83d3eb7bd34f0849af8ec503;
	}

	sfg run {
		reg_A = ((ns(const_m - 1)) reg_A[0:const_m - 2]) # ((ns(1)) reg_A[const_m - 1]);
		reg_cycle = reg_cycle + 1;
	}

	sfg MALU_mult {
		start = 1;
		mode = 1;
		plus_one = 0;

		$display("[[Start]]");
	}

	sfg MALU_mult_one {
		start = 1;
		mode = 1;
		plus_one = 1;

		$display("[[Start]]");
	}


	sfg MALU_add {
		start = 1;
		mode = 0;
		plus_one = 0;

		$display("[[Start]]");
	}

	sfg MALU_idle {
		start = 0;
		mode = 0;
		plus_one = 0;
	}

	sfg do_always {
		A = reg_A;
		B = reg_B;

		reg_ready = start == 1 ? 0 : ready;
		reg_T = ready == 1 ? T : reg_T;
	}

	sfg print {
		$display("[Cycle ", $cycle, "] - A = ", $hex, A, " - B: ", B, " - T: ", T);
	}

	sfg done {
		$display("[[Done]] Final result = ", $hex, T);
	}

	sfg end {
		$finish;
	}

	sfg printT {
		$display("[Mult] i = ", $cycle, " - T = ", T);
	}
}

fsm fsm_testbench (testbench) {
	initial init;
	state start, run, idle;

	@init (init, do_always, MALU_idle) -> start;

	@start (MALU_mult, do_always) -> run;
	@run	if (reg_ready == 0) then (MALU_idle, run, do_always) -> run;
			else (MALU_idle, do_always, print, done) -> idle;

//	@start (MALU_add, do_always, print) -> run;
//	@run	if (reg_ready == 0) then (MALU_idle, do_always, print) -> run;
//			else (MALU_idle, do_always, print) -> idle;

	@idle (do_always, MALU_idle, end) -> idle;
}

system S {
	testbench;
}

