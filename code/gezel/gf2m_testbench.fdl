#include "constants.inc"

#include "wrapper-gf2m.fdl"

dp testbench {
	reg reg_A: ns(const_m);
	reg reg_B: ns(const_m);

	reg reg_mode: ns(1);

	sig A: ns(const_m);
	sig B: ns(const_m);

	sig T: ns(const_m);

	sig start: ns(1);
	sig mode: ns(1);

	sig ready: ns(1);

	reg reg_cycle: ns(const_m_log);
	reg reg_ready: ns(1);
	
	reg reg_T: ns(const_m);

	use wrapper_gf2m(A, B, start, mode, T, ready);

	sfg init {
		reg_cycle = 0;
		start = 0;
		reg_mode = 0;

		reg_A = 3;
		reg_B = 8;
	}

	sfg run {
		reg_A = reg_A << 1;
		reg_cycle = reg_cycle + 1;
	}

	sfg set_start {
		start = 1;

		$display("[[Starting]]");
	}

	sfg unset_start {
		start = 0;
	}

	sfg do_always {
		A = reg_A;
		B = reg_B;
		mode = reg_mode;

		reg_ready = start == 1 ? 0 : ready;
		
		reg_T = ready == 1 ? T : reg_T;
	}

	sfg print {
		//$display("[Cycle ", $cycle, "] - Start = ", start, " - ready: ", ready, " - T: ", T);
	}

	sfg end {
		$display("[Testbench] Done (In previous cycle) - Cur cycle: ", $cycle, " - Result = ", $dec, reg_T);
	}
}

fsm fsm_testbench (testbench) {
	initial init;
	state start, run, idle;

	@init (init, do_always, print) -> start;
	@start (set_start, do_always, print) -> run;
	@run	if (reg_ready == 1) then (unset_start, do_always, end, print) -> idle;
			else (run, unset_start, do_always, print) -> run;
	@idle (do_always, unset_start) -> idle;
}

system S {
	testbench;
}

