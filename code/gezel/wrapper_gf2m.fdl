#ifndef WRAPPER_GF2M_FDL
#define WRAPPER_GF2M_FDL

#include "constants.inc"

#include "malu.fdl"

// Mode:	0 = addition
//			1 = multiplication

dp wrapper_gf2m (in A: ns(const_m);
	in B: ns(const_m);
	in start: ns(1);
	in mode: ns(1);
	in plus_one: ns(1);
	out T: ns(const_m);
	out ready: ns(1)) {

	reg reg_start: ns(1);
	reg reg_mode: ns(1);
	reg reg_plus_one: ns(1);

	reg reg_T: ns(const_m);
	reg reg_m: ns(1);

	reg reg_cycle: ns(const_m_log);
	
	reg reg_prev_ready:	ns(1);

	sig B_in: ns(const_m);
	sig B_mux: ns(1);

	sig T_in: ns(const_m);
	sig T_out: ns(const_m);
	sig T_mux: ns(const_m);

	sig m_in: ns(1);
	sig m_mux: ns(1);
	sig m_out: ns(1);

	sig sig_ready: ns(1);
		
	sig sig_T_last: ns(1);
	//$trace(B_in, "gf2m-B_in.txt");
	//$trace(T_out, "gf2m-T_out.txt");
	//$trace(B_mux, "gf2m-B_mux.txt");
	//$trace(sig_ready, "gf2m-ready.txt");

	use malu(T_in, B_in, m_in, T_out, m_out);

	sfg do_always {
		reg_start = start;

		// Update settings regs as long as start is high
		reg_mode = start == 1 ? mode : reg_mode;
		reg_plus_one = start == 1 ? plus_one : reg_plus_one;
		
		// When start is low, increase cycle counter, otherwise reset
		reg_cycle = start == 1 ? 0 : (sig_ready == 1 ? reg_cycle : reg_cycle + 1);

		// Store data in reg_T:
		// When start is high, either set reg_T to 0 (multiplication) or A (addition)
		// Otherwise set reg_T to MALU_output or MALU_output shifted 1 to the left (so the result stays the same)
		T_mux = start == 1 ? (mode == 0 ? A : 0) : (sig_ready == 1 ? m_out # T_out[(const_m - 1):1] : T_out);
		

		//T_mux = start == 1 ? (mode == 0 ? A : 0) : (sig_ready == 1 ? ((ns(1)) m_out) # ((ns(const_m - 2)) T_out[2:(const_m - 1)]) # ((ns(1)) T_out[1] ^ reg_plus_one) : T_out);
		//T_mux = start == 1 ? (mode == 0 ? A : 0) : (sig_ready == 1 ? m_out # T_out[(const_m - 1):2] # (T_out[1] ^ ((ns(1)) 0b1)) : T_out);
		//T_mux = start == 1 ? (mode == 0 ? A : 0) : (sig_ready == 1 ? ((ns(1)) m_out) # ((ns(const_m - 2)) T_out[2:(const_m - 1)]) # ((ns(1)) (((ns(1)) T_out[1]) & ~((ns(1)) reg_plus_one)) | (((ns(1)) ~T_out[1]) & ((ns(1)) reg_plus_one))) : T_out);

		reg_T = T_mux;
		T_in = reg_T;
		
		// Set output to input of reg_T
		sig_T_last = T_mux[0] ^ reg_plus_one;
		T = T_mux[(const_m - 1):1] # sig_T_last;
		
		// Set B input of mux
		// If ready: AND 0, else if addition and 1 cycle after starting: AND 1, else if multiplication: AND last A bit 		
		B_mux = reg_start == 1 & start == 0 & reg_mode == 0 ? 1 : (sig_ready == 1 & reg_prev_ready == 1 ? 0 : ((ns(1)) A[const_m - 1]));
		B_in = B & (B_mux == 1 ? ((ns(const_m)) 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) : 0);
		//B_in = ANDMBITS(B_mux, B);
		
		// Set reg_m
		// If start or sig_ready or reg_ready is high, set m to 0, otherwise set to output from MALU
		m_in = reg_m;
		m_mux = ~(sig_ready | start) & m_out;
		reg_m = m_mux;

		// Set ready register and output:
		// If start = 1 then ready = 0. Else, if doing addition, set ready to 1; when doing multiplication, set to zero as long as reg_cycle <= const_m - 2.
		sig_ready = start == 1 ? 0 : (reg_mode == 0 ? 1 : (reg_cycle <= (const_m - 2) ? 0 : 1));
		ready = sig_ready;
		reg_prev_ready = sig_ready;
		
		//$display("[Wrapper] B_in = ", $dec, B_in, " - T_in = ", T_in, " - m_in = ", m_in, " - T_out = ", T_out, " - sig_ready = ", sig_ready, " - reg_T = ", reg_T, " - T_mux = ", T_mux, " - B_mux = ", B_mux, " - start = ", start);
	}
} hardwired fsm_wrapper_gf2m (wrapper_gf2m) { do_always; }

#endif /* WRAPPER_GF2M_FDL */
