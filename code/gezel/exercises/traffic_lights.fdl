dp counter (in enabled: ns(1);
	    out finished: ns(1)) {
	reg enabled_state:	ns(1);
	reg counter:		ns(2);

	sfg idle {
		enabled_state = enabled;

		counter = 0;
		finished = 0;
	}

	sfg count {
		enabled_state = enabled;

		counter = counter + 1;
		finished = (counter == 0) ? 1 : 0;
	}
}

fsm fsm_counter (counter) {
	initial default;
	
	@default	if (enabled_state == 1) then (count)	-> default;
			else (idle)				-> default;
}

dp counter2 : counter
dp counter3 : counter
dp counter4 : counter

dp traffic_lights (in start: ns(1);
		   out green_enable, orange_enable, red_enable: ns(1)) {
	reg green_enable_state:	ns(1);
	reg green_done:		ns(1);
	sig green_wire:		ns(1);

	reg red_enable_state:	ns(1);
	reg red_done:		ns(1);
	sig red_wire:		ns(1);

	reg orange_enable_state:	ns(1);
	reg orange_done:		ns(1);
	sig orange_wire:		ns(1);

	reg orange_blink_state:		ns(1);
	reg orange_blink_done:		ns(1);
	sig orange_blink_wire:		ns(1);

	reg start_state:	ns(1);

	use counter(green_enable_state, green_wire);
	use counter2(orange_enable_state, orange_wire);
	use counter3(red_enable_state, red_wire);
	use counter4(orange_blink_state, orange_blink_wire);

	sfg set_start {
		start_state = start;
	}

	sfg idle {
		// Blink orange lights
		// Every time counter wraps around, toggle state
		orange_blink_state = 1;
		orange_blink_done = orange_blink_wire;
		orange_enable_state = (orange_blink_done == 1) ? orange_enable_state ^ 1 : orange_enable_state;
		$display("Toggling orange - Orange = ", orange_enable);
	}

	sfg green {
		// Turn on green light
		green_enable_state = 1;
		green_done = green_wire;
		$display("Green");
	}

	sfg orange {
		// Turn on orange light
		orange_enable_state = 1;
		orange_done = orange_wire;
		$display("Orange");
	}

	sfg red {
		// Turn on red light
		red_enable_state = 1;
		red_done = red_wire;
		$display("Red");
	}

	sfg disable_green {
		green_enable_state = 0;
	}

	sfg disable_orange {
		orange_enable_state = 0;
		orange_blink_state = 0;
	}

	sfg disable_red {
		red_enable_state = 0;
	}

	sfg set_output {
		green_enable = green_enable_state;
		orange_enable = orange_enable_state;
		red_enable = red_enable_state;
	}
}

fsm fsm_traffic_lights(traffic_lights) {
	initial idle;
	state green, orange, red;

	@idle	if (start_state == 1) then (disable_green, disable_orange, red, set_output, set_start) -> red;
		else (idle, set_output, set_start) -> idle;

	@green	if (start_state == 0)	then (disable_green, idle, set_output, set_start) -> idle;
		else	if (green_done == 1) then (disable_green, orange, set_output, set_start) -> orange;
			else (green, set_output, set_start) -> green;

	@orange	if (start_state == 0)	then (idle, set_output, set_start) -> idle;
		else	if (orange_done == 1) then (disable_orange, red, set_output, set_start) -> red;
			else (orange, set_output, set_start) -> orange;

	@red 	if (start_state == 0)	then (disable_red, idle, set_output, set_start) -> idle;
		else	if (red_done == 1) then (disable_red, green, set_output, set_start) -> green;
			else (red, set_output, set_start) -> red;
}

dp test_tf (out start: ns(1)) {
	always {
		start = 1;
	}
}

dp test_system {
	sig start:	ns(1);
	use test_tf(start);
	use traffic_lights(start);
}

system tl {
	test_system;
}
