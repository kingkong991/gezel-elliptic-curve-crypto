ipblock ram(in address : ns(4);
            in wr,rd   : ns(1);  
            in idata   : ns(32);
            out odata  : ns(32)) {
   iptype "ram";
   ipparm "wl=32";  
   ipparm "size=9"; 
}

dp ramtest (out address:	ns(4);
				out wr, rd:		ns(1);
				out idata:		ns(32);
				in odata:		ns(32)) {

	reg curaddress:	ns(4);
	sig value:			ns(4);
	
	sfg init {
		curaddress = 0;
	}

	sfg idle {
		address = 0;
		wr = 0;
		rd = 0;
		idata = 0;
	}

	sfg write {
		address = curaddress;
		wr = 1;
		rd = 0;

		value = curaddress + 1;
		idata = value # value # value # value # value # value # value # value;

		$display("Cycle = ", $cycle, " - Writing to ", address, " - Data = ", idata);
	}

	sfg incaddr {
		curaddress = curaddress + 1;
	}

	sfg read {
		address = curaddress;
		wr = 0;
		rd = 1;
		idata = 0;

		$display("Cycle = ", $cycle, " - Reading from ", address, " - Data = ", odata);
	}

	//always { $display("Cycle = ", $cycle); }
}

fsm ramtest_fsm (ramtest) {
	initial setup;
	state read, write, idle;

	@setup	(init, idle) -> write;
	@write	if (curaddress < 0x8) then (write, incaddr) -> write;
				else (write, init)	->	read;
	@read		if (curaddress <= 0x8) then (read, incaddr) -> read;
				else	(idle)	-> idle;
	@idle		(idle)	-> idle;
}

dp ramsystem {
	sig address:	ns(4);
	sig wr, rd:		ns(1);
	sig idata, odata:	ns(32);

	use ram(address, wr, rd, idata, odata);
	use ramtest(address, wr, rd, idata, odata);
}

system S {
	ramsystem;
}
